import { Request, Response, NextFunction } from 'express';
import { UserContext } from '../types';

// Extend Express Request to include user context
declare global {
  namespace Express {
    interface Request {
      user?: UserContext;
    }
  }
}

/**
 * Home Assistant authentication middleware
 * Validates the Bearer token against Home Assistant's API
 */
export async function authenticateToken(
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> {
  try {
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      res.status(401).json({
        success: false,
        error: 'Authorization header with Bearer token is required',
        timestamp: new Date().toISOString()
      });
      return;
    }

    const token = authHeader.substring(7); // Remove 'Bearer ' prefix

    if (!token) {
      res.status(401).json({
        success: false,
        error: 'Token is required',
        timestamp: new Date().toISOString()
      });
      return;
    }

    // Validate token with Home Assistant API
    const userContext = await validateHomeAssistantToken(token);

    if (!userContext) {
      res.status(401).json({
        success: false,
        error: 'Invalid or expired token',
        timestamp: new Date().toISOString()
      });
      return;
    }

    // Attach user context to request
    req.user = userContext;
    next();
  } catch (error) {
    console.error('Authentication error:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error during authentication',
      timestamp: new Date().toISOString()
    });
  }
}

/**
 * Validate Home Assistant token by calling the auth endpoint
 */
export async function validateHomeAssistantToken(token: string): Promise<UserContext | null> {
  try {
    // Get Home Assistant base URL from environment
    const haBaseUrl = process.env.HA_BASE_URL || 'http://supervisor/core';
    const isDevelopment = process.env.NODE_ENV === 'development';
    
    if (isDevelopment) {
      console.log(`üîç Testing Home Assistant authentication...`);
      console.log(`üì° HA Base URL: ${haBaseUrl}`);
      console.log(`üîë Token: ${token.substring(0, 10)}...`);
    }
    
    // Extract user ID from JWT token
    const userIdFromToken = extractUserIdFromToken(token);
    
    // Create AbortController for timeout
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000);
    
    try {
      // First, try to get user info using the states API (which we know works)
      const statesResponse = await fetch(`${haBaseUrl}/api/states`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      if (statesResponse.ok) {
        const states = await statesResponse.json() as any[];
        const personEntities = states.filter((s: any) => s.entity_id.startsWith('person.'));
        
        if (isDevelopment) {
          console.log(`‚úÖ Home Assistant API accessible with ${states.length} entities`);
          console.log(`üë• Found ${personEntities.length} person entities`);
        }
        
        // Try to find a matching person entity
        const matchingPerson = personEntities.find((p: any) => p.attributes.user_id === userIdFromToken);
        
        if (matchingPerson) {
          if (isDevelopment) {
            console.log(`‚úÖ Found matching person: ${matchingPerson.attributes.friendly_name}`);
          }
          
          return {
            userId: userIdFromToken,
            username: matchingPerson.attributes.friendly_name || matchingPerson.attributes.name || 'homeassistant',
            isAdmin: true, // Long-lived access tokens typically have admin privileges
            permissions: ['read', 'write', 'admin']
          };
        } else {
          if (isDevelopment) {
            console.log(`‚ö†Ô∏è  No matching person found for user ID: ${userIdFromToken}`);
            console.log(`üìã Available person entities:`, personEntities.map((p: any) => ({
              entity_id: p.entity_id,
              name: p.attributes.friendly_name || p.attributes.name,
              user_id: p.attributes.user_id
            })));
          }
          
          // Token is valid but no matching person - likely a service account or admin token
          return {
            userId: userIdFromToken,
            username: 'homeassistant', // Default to homeassistant for service accounts
            isAdmin: true,
            permissions: ['read', 'write', 'admin']
          };
        }
      }
      
      // If states API fails, fall back to the original auth endpoint approach
      const authController = new AbortController();
      const authTimeoutId = setTimeout(() => authController.abort(), 5000);
      
      const response = await fetch(`${haBaseUrl}/api/auth/check`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        signal: authController.signal
      });

      clearTimeout(authTimeoutId);

      if (isDevelopment) {
        console.log(`üìä HA Auth API Response: ${response.status} ${response.statusText}`);
      }

      if (!response.ok) {
        if (isDevelopment) {
          console.log(`‚ö†Ô∏è  Home Assistant auth API failed (${response.status}), using token-based validation...`);
        }
        return await fallbackTokenValidation(token);
      }

      const authData = await response.json() as any;
      
      if (isDevelopment) {
        console.log(`‚úÖ Home Assistant authentication successful`);
        console.log(`üë§ User data:`, authData);
      }
      
      // Extract user information from Home Assistant response
      return {
        userId: authData?.id || authData?.user_id || userIdFromToken,
        username: authData?.name || authData?.username || 'homeassistant',
        isAdmin: authData?.is_admin || authData?.admin || true,
        permissions: authData?.permissions || ['read', 'write', 'admin']
      };
      
    } catch (fetchError) {
      clearTimeout(timeoutId);
      throw fetchError;
    }
  } catch (error) {
    const isDevelopment = process.env.NODE_ENV === 'development';
    
    if (isDevelopment) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      console.error('üî¥ Token validation error:', errorMessage);
      
      if (error instanceof Error) {
        console.log('üìù Error details:', {
          name: error.name,
          message: error.message,
          stack: error.stack?.substring(0, 200)
        });
      }
    } else {
      console.error('Token validation error:', error);
    }
    
    // Fallback to basic token validation if Home Assistant API is unavailable
    return await fallbackTokenValidation(token);
  }
}

/**
 * Extract user ID from JWT token
 */
function extractUserIdFromToken(token: string): string {
  try {
    const parts = token.split('.');
    if (parts.length !== 3) {
      throw new Error('Invalid JWT format');
    }
    
    const payload = JSON.parse(Buffer.from(parts[1], 'base64url').toString());
    return payload.iss || 'unknown';
  } catch (error) {
    console.error('Error extracting user ID from token:', error);
    return 'unknown';
  }
}

/**
 * Fallback token validation for development or when Home Assistant API is unavailable
 */
async function fallbackTokenValidation(token: string): Promise<UserContext | null> {
  // In development mode, be more permissive with token validation
  const isDevelopment = process.env.NODE_ENV === 'development';
  
  if (isDevelopment) {
    // Development mode: accept any reasonable token format
    if (token.length >= 10 && /^[a-zA-Z0-9._-]+$/.test(token)) {
      console.log(`Development mode: Accepting token for testing`);
      
      return {
        userId: 'dev-user',
        username: 'developer',
        isAdmin: true,
        permissions: ['read', 'write', 'admin']
      };
    }
  } else {
    // Production mode: strict validation
    if (token.length >= 32 && /^[a-zA-Z0-9._-]+$/.test(token)) {
      const allowedUsers = process.env.ALLOWED_USERS ? process.env.ALLOWED_USERS.split(',') : [];
      
      return {
        userId: 'homeassistant-user',
        username: 'homeassistant',
        isAdmin: true,
        permissions: ['read', 'write']
      };
    }
  }
  
  return null;
}

/**
 * Check if user has permission for write operations
 */
export function hasWritePermission(user: UserContext): boolean {
  const allowedUsers = process.env.ALLOWED_USERS ? process.env.ALLOWED_USERS.split(',') : [];
  const enableWriteOperations = process.env.ENABLE_WRITE_OPERATIONS === 'true';
  
  if (!enableWriteOperations) {
    return false;
  }
  
  // If no specific users are configured, allow all authenticated users
  if (allowedUsers.length === 0) {
    return true;
  }
  
  // Check if user is in allowed users list
  return allowedUsers.includes(user.username) || allowedUsers.includes(user.userId);
}

/**
 * Check if user has admin permissions
 */
export function hasAdminPermission(user: UserContext): boolean {
  return user.isAdmin || user.permissions.includes('admin');
}

/**
 * Get user context from request
 */
export function getUserContext(req: Request): UserContext | null {
  return req.user || null;
}
